{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red53\green117\blue213;\red13\green19\blue31;\red171\green219\blue255;
\red81\green77\blue170;\red253\green154\blue48;\red152\green224\blue36;\red223\green31\blue42;\red199\green232\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c25882\c54510\c86667;\cssrgb\c5882\c9804\c16471;\cssrgb\c72157\c88627\c100000;
\cssrgb\c39216\c39216\c72549;\cssrgb\c100000\c66667\c24314;\cssrgb\c65098\c88627\c18039;\cssrgb\c90980\c21569\c21569;\cssrgb\c81961\c92941\c100000;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /* \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 leetcode.com problem:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 Return k.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 */\cf4 \strokec4  \cb1 \
\
\cf2 \cb3 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf5 \strokec5 @param\cf2 \strokec2  \cf5 \strokec5 \{number[]\}\cf2 \strokec2  \cf6 \strokec6 nums\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \cf5 \strokec5 @return\cf2 \strokec2  \cf5 \strokec5 \{number\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 var\cf4 \strokec4  \cf7 \strokec7 removeDuplicates\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf7 \strokec7 function\cf4 \strokec4 (\cf6 \strokec6 nums\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf8 \strokec8 if\cf4 \strokec4  (\cf6 \strokec6 nums\cf4 \strokec4 .length \cf8 \strokec8 ===\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf8 \strokec8 return\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 k\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ; \cf2 \strokec2 // Initialize the unique count to 1 (since the first element is always unique)\cf4 \cb1 \strokec4 \
\
\cb3   \cf8 \strokec8 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 i\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ; \cf6 \strokec6 i\cf4 \strokec4  \cf8 \strokec8 <\cf4 \strokec4  \cf6 \strokec6 nums\cf4 \strokec4 .length; \cf6 \strokec6 i\cf8 \strokec8 ++\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf8 \strokec8 if\cf4 \strokec4  (\cf6 \strokec6 nums\cf4 \strokec4 [\cf6 \strokec6 i\cf4 \strokec4 ] \cf8 \strokec8 !==\cf4 \strokec4  \cf6 \strokec6 nums\cf4 \strokec4 [\cf6 \strokec6 i\cf4 \strokec4  \cf8 \strokec8 -\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ]) \{\cb1 \
\cb3       \cf6 \strokec6 nums\cf4 \strokec4 [\cf6 \strokec6 k\cf4 \strokec4 ] \cf8 \strokec8 =\cf4 \strokec4  \cf6 \strokec6 nums\cf4 \strokec4 [\cf6 \strokec6 i\cf4 \strokec4 ]; \cf2 \strokec2 // Shift unique elements to the front of the array\cf4 \cb1 \strokec4 \
\cb3       \cf6 \strokec6 k\cf8 \strokec8 ++\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf8 \strokec8 return\cf4 \strokec4  \cf6 \strokec6 k\cf4 \strokec4 ;\cb1 \
\cb3 \};\cb1 \
}